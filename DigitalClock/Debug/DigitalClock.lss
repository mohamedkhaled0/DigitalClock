
DigitalClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00000d12  00000da6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800088  00800088  00000dce  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000dce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fd6  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089c  00000000  00000000  00001f26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009c2  00000000  00000000  000027c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  00003184  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004dd  00000000  00000000  000033c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000843  00000000  00000000  000038a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000040e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e1       	ldi	r30, 0x12	; 18
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 38       	cpi	r26, 0x8F	; 143
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a4 02 	call	0x548	; 0x548 <main>
  8a:	0c 94 87 06 	jmp	0xd0e	; 0xd0e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <KeyPadInit>:
int colunms[] = {C0 ,C1 , C2, C3} ; 
int rows[] = {R0 ,R1 , R2, R3} ;

void KeyPadInit (void){
	
	KeyPadDirection |= (1<<C0 | 1<<C1 |1<<C2 | 1<<C3 ) ;  
  92:	84 b3       	in	r24, 0x14	; 20
  94:	80 6f       	ori	r24, 0xF0	; 240
  96:	84 bb       	out	0x14, r24	; 20
	KeyPadDirection &= ~(1<<R0 | 1<<R1 |1<<R2 | 1<<R3 ) ;  
  98:	84 b3       	in	r24, 0x14	; 20
  9a:	80 7f       	andi	r24, 0xF0	; 240
  9c:	84 bb       	out	0x14, r24	; 20
	KeyPadPort = 0xff ; 
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	85 bb       	out	0x15, r24	; 21
  a2:	08 95       	ret

000000a4 <KeyPadgetkeypressed>:
} 


char KeyPadgetkeypressed (void){
  a4:	0f 93       	push	r16
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	a8 e6       	ldi	r26, 0x68	; 104
  ae:	b0 e0       	ldi	r27, 0x00	; 0
	
	int i , j ; 
	for (i = 0 ; i< 4 ; i++) 
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	50 e0       	ldi	r21, 0x00	; 0
	{ 
		KeyPadPort |= (1<<C0 | 1<<C1 | 1<<C2 | 1<<C3); 
		KeyPadPort &= ~(1<<colunms[i]); 
  b4:	01 e0       	ldi	r16, 0x01	; 1
  b6:	10 e0       	ldi	r17, 0x00	; 0
char KeyPadgetkeypressed (void){
	
	int i , j ; 
	for (i = 0 ; i< 4 ; i++) 
	{ 
		KeyPadPort |= (1<<C0 | 1<<C1 | 1<<C2 | 1<<C3); 
  b8:	85 b3       	in	r24, 0x15	; 21
  ba:	80 6f       	ori	r24, 0xF0	; 240
  bc:	85 bb       	out	0x15, r24	; 21
		KeyPadPort &= ~(1<<colunms[i]); 
  be:	95 b3       	in	r25, 0x15	; 21
  c0:	8c 91       	ld	r24, X
  c2:	12 96       	adiw	r26, 0x02	; 2
  c4:	98 01       	movw	r18, r16
  c6:	02 c0       	rjmp	.+4      	; 0xcc <KeyPadgetkeypressed+0x28>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	8a 95       	dec	r24
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <KeyPadgetkeypressed+0x24>
  d0:	82 2f       	mov	r24, r18
  d2:	80 95       	com	r24
  d4:	89 23       	and	r24, r25
  d6:	85 bb       	out	0x15, r24	; 21
  d8:	e0 e6       	ldi	r30, 0x60	; 96
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	c1 e0       	ldi	r28, 0x01	; 1
  de:	d0 e0       	ldi	r29, 0x00	; 0
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	03 c0       	rjmp	.+6      	; 0xec <KeyPadgetkeypressed+0x48>
  e6:	6f 5f       	subi	r22, 0xFF	; 255
  e8:	7f 4f       	sbci	r23, 0xFF	; 255
  ea:	21 96       	adiw	r28, 0x01	; 1
      for (j = 0;j<4;j++)
      {  
		  
		 if (!(KeyPadPin&(1<<rows[j])))  
  ec:	83 b3       	in	r24, 0x13	; 19
  ee:	20 81       	ld	r18, Z
  f0:	32 96       	adiw	r30, 0x02	; 2
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 2e       	mov	r0, r18
  f6:	02 c0       	rjmp	.+4      	; 0xfc <KeyPadgetkeypressed+0x58>
  f8:	95 95       	asr	r25
  fa:	87 95       	ror	r24
  fc:	0a 94       	dec	r0
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <KeyPadgetkeypressed+0x54>
 100:	80 fd       	sbrc	r24, 0
 102:	50 c0       	rjmp	.+160    	; 0x1a4 <KeyPadgetkeypressed+0x100>
 104:	c8 01       	movw	r24, r16
 106:	02 c0       	rjmp	.+4      	; 0x10c <KeyPadgetkeypressed+0x68>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	2a 95       	dec	r18
 10e:	e2 f7       	brpl	.-8      	; 0x108 <KeyPadgetkeypressed+0x64>
 110:	9c 01       	movw	r18, r24
		 {
		   while (!(KeyPadPin&(1<<rows[j])));
 112:	83 b3       	in	r24, 0x13	; 19
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	82 23       	and	r24, r18
 118:	93 23       	and	r25, r19
 11a:	89 2b       	or	r24, r25
 11c:	d1 f3       	breq	.-12     	; 0x112 <KeyPadgetkeypressed+0x6e>
			 switch(i) 
 11e:	41 30       	cpi	r20, 0x01	; 1
 120:	51 05       	cpc	r21, r1
 122:	c9 f0       	breq	.+50     	; 0x156 <KeyPadgetkeypressed+0xb2>
 124:	24 f4       	brge	.+8      	; 0x12e <KeyPadgetkeypressed+0x8a>
 126:	41 15       	cp	r20, r1
 128:	51 05       	cpc	r21, r1
 12a:	41 f0       	breq	.+16     	; 0x13c <KeyPadgetkeypressed+0x98>
 12c:	3b c0       	rjmp	.+118    	; 0x1a4 <KeyPadgetkeypressed+0x100>
 12e:	42 30       	cpi	r20, 0x02	; 2
 130:	51 05       	cpc	r21, r1
 132:	f1 f0       	breq	.+60     	; 0x170 <KeyPadgetkeypressed+0xcc>
 134:	43 30       	cpi	r20, 0x03	; 3
 136:	51 05       	cpc	r21, r1
 138:	41 f1       	breq	.+80     	; 0x18a <KeyPadgetkeypressed+0xe6>
 13a:	34 c0       	rjmp	.+104    	; 0x1a4 <KeyPadgetkeypressed+0x100>
			 { 
			      case (0):
			     { 
				 if(j==0) return '7' ;	
 13c:	61 15       	cp	r22, r1
 13e:	71 05       	cpc	r23, r1
 140:	e9 f1       	breq	.+122    	; 0x1bc <KeyPadgetkeypressed+0x118>
				 else if (j==1) return '4';
 142:	61 30       	cpi	r22, 0x01	; 1
 144:	71 05       	cpc	r23, r1
 146:	e1 f1       	breq	.+120    	; 0x1c0 <KeyPadgetkeypressed+0x11c>
				 else if (j==2) return '1'; 
 148:	62 30       	cpi	r22, 0x02	; 2
 14a:	71 05       	cpc	r23, r1
 14c:	d9 f1       	breq	.+118    	; 0x1c4 <KeyPadgetkeypressed+0x120>
				 else if (j==3) return 'c';
 14e:	63 30       	cpi	r22, 0x03	; 3
 150:	71 05       	cpc	r23, r1
 152:	41 f5       	brne	.+80     	; 0x1a4 <KeyPadgetkeypressed+0x100>
 154:	39 c0       	rjmp	.+114    	; 0x1c8 <KeyPadgetkeypressed+0x124>
				 break; 
			     } 
				 
				 case (1):
			     { 
				 if(j==0) return '8' ;	
 156:	61 15       	cp	r22, r1
 158:	71 05       	cpc	r23, r1
 15a:	c1 f1       	breq	.+112    	; 0x1cc <KeyPadgetkeypressed+0x128>
				 else if (j==1) return '5';
 15c:	61 30       	cpi	r22, 0x01	; 1
 15e:	71 05       	cpc	r23, r1
 160:	b9 f1       	breq	.+110    	; 0x1d0 <KeyPadgetkeypressed+0x12c>
				 else if (j==2) return '2'; 
 162:	62 30       	cpi	r22, 0x02	; 2
 164:	71 05       	cpc	r23, r1
 166:	b1 f1       	breq	.+108    	; 0x1d4 <KeyPadgetkeypressed+0x130>
				 else if (j==3) return '0';
 168:	63 30       	cpi	r22, 0x03	; 3
 16a:	71 05       	cpc	r23, r1
 16c:	d9 f4       	brne	.+54     	; 0x1a4 <KeyPadgetkeypressed+0x100>
 16e:	34 c0       	rjmp	.+104    	; 0x1d8 <KeyPadgetkeypressed+0x134>
				 break; 
			     } 
				 
				 case (2):
			     { 
				 if(j==0) return '9' ;	
 170:	61 15       	cp	r22, r1
 172:	71 05       	cpc	r23, r1
 174:	99 f1       	breq	.+102    	; 0x1dc <KeyPadgetkeypressed+0x138>
				 else if (j==1) return '6';
 176:	61 30       	cpi	r22, 0x01	; 1
 178:	71 05       	cpc	r23, r1
 17a:	91 f1       	breq	.+100    	; 0x1e0 <KeyPadgetkeypressed+0x13c>
				 else if (j==2) return '3'; 
 17c:	62 30       	cpi	r22, 0x02	; 2
 17e:	71 05       	cpc	r23, r1
 180:	89 f1       	breq	.+98     	; 0x1e4 <KeyPadgetkeypressed+0x140>
				 else if (j==3) return '=';
 182:	63 30       	cpi	r22, 0x03	; 3
 184:	71 05       	cpc	r23, r1
 186:	71 f4       	brne	.+28     	; 0x1a4 <KeyPadgetkeypressed+0x100>
 188:	2f c0       	rjmp	.+94     	; 0x1e8 <KeyPadgetkeypressed+0x144>
			     } 
				 
				 
				 case (3):
			     { 
				 if(j==0) return '/' ;	
 18a:	61 15       	cp	r22, r1
 18c:	71 05       	cpc	r23, r1
 18e:	71 f1       	breq	.+92     	; 0x1ec <KeyPadgetkeypressed+0x148>
				 else if (j==1) return '*';
 190:	61 30       	cpi	r22, 0x01	; 1
 192:	71 05       	cpc	r23, r1
 194:	69 f1       	breq	.+90     	; 0x1f0 <KeyPadgetkeypressed+0x14c>
				 else if (j==2) return '-'; 
 196:	62 30       	cpi	r22, 0x02	; 2
 198:	71 05       	cpc	r23, r1
 19a:	61 f1       	breq	.+88     	; 0x1f4 <KeyPadgetkeypressed+0x150>
				 else if (j==3) return '+';
 19c:	63 30       	cpi	r22, 0x03	; 3
 19e:	71 05       	cpc	r23, r1
 1a0:	69 f5       	brne	.+90     	; 0x1fc <KeyPadgetkeypressed+0x158>
 1a2:	2a c0       	rjmp	.+84     	; 0x1f8 <KeyPadgetkeypressed+0x154>
	int i , j ; 
	for (i = 0 ; i< 4 ; i++) 
	{ 
		KeyPadPort |= (1<<C0 | 1<<C1 | 1<<C2 | 1<<C3); 
		KeyPadPort &= ~(1<<colunms[i]); 
      for (j = 0;j<4;j++)
 1a4:	c4 30       	cpi	r28, 0x04	; 4
 1a6:	d1 05       	cpc	r29, r1
 1a8:	0c f4       	brge	.+2      	; 0x1ac <KeyPadgetkeypressed+0x108>
 1aa:	9d cf       	rjmp	.-198    	; 0xe6 <KeyPadgetkeypressed+0x42>


char KeyPadgetkeypressed (void){
	
	int i , j ; 
	for (i = 0 ; i< 4 ; i++) 
 1ac:	4f 5f       	subi	r20, 0xFF	; 255
 1ae:	5f 4f       	sbci	r21, 0xFF	; 255
 1b0:	44 30       	cpi	r20, 0x04	; 4
 1b2:	51 05       	cpc	r21, r1
 1b4:	09 f0       	breq	.+2      	; 0x1b8 <KeyPadgetkeypressed+0x114>
 1b6:	80 cf       	rjmp	.-256    	; 0xb8 <KeyPadgetkeypressed+0x14>
		 }       
       
	 }
	
   } 
   return 'A' ;
 1b8:	81 e4       	ldi	r24, 0x41	; 65
 1ba:	25 c0       	rjmp	.+74     	; 0x206 <KeyPadgetkeypressed+0x162>
		   while (!(KeyPadPin&(1<<rows[j])));
			 switch(i) 
			 { 
			      case (0):
			     { 
				 if(j==0) return '7' ;	
 1bc:	87 e3       	ldi	r24, 0x37	; 55
 1be:	23 c0       	rjmp	.+70     	; 0x206 <KeyPadgetkeypressed+0x162>
				 else if (j==1) return '4';
 1c0:	84 e3       	ldi	r24, 0x34	; 52
 1c2:	21 c0       	rjmp	.+66     	; 0x206 <KeyPadgetkeypressed+0x162>
				 else if (j==2) return '1'; 
 1c4:	81 e3       	ldi	r24, 0x31	; 49
 1c6:	1f c0       	rjmp	.+62     	; 0x206 <KeyPadgetkeypressed+0x162>
				 else if (j==3) return 'c';
 1c8:	83 e6       	ldi	r24, 0x63	; 99
 1ca:	1d c0       	rjmp	.+58     	; 0x206 <KeyPadgetkeypressed+0x162>
				 break; 
			     } 
				 
				 case (1):
			     { 
				 if(j==0) return '8' ;	
 1cc:	88 e3       	ldi	r24, 0x38	; 56
 1ce:	1b c0       	rjmp	.+54     	; 0x206 <KeyPadgetkeypressed+0x162>
				 else if (j==1) return '5';
 1d0:	85 e3       	ldi	r24, 0x35	; 53
 1d2:	19 c0       	rjmp	.+50     	; 0x206 <KeyPadgetkeypressed+0x162>
				 else if (j==2) return '2'; 
 1d4:	82 e3       	ldi	r24, 0x32	; 50
 1d6:	17 c0       	rjmp	.+46     	; 0x206 <KeyPadgetkeypressed+0x162>
				 else if (j==3) return '0';
 1d8:	80 e3       	ldi	r24, 0x30	; 48
 1da:	15 c0       	rjmp	.+42     	; 0x206 <KeyPadgetkeypressed+0x162>
				 break; 
			     } 
				 
				 case (2):
			     { 
				 if(j==0) return '9' ;	
 1dc:	89 e3       	ldi	r24, 0x39	; 57
 1de:	13 c0       	rjmp	.+38     	; 0x206 <KeyPadgetkeypressed+0x162>
				 else if (j==1) return '6';
 1e0:	86 e3       	ldi	r24, 0x36	; 54
 1e2:	11 c0       	rjmp	.+34     	; 0x206 <KeyPadgetkeypressed+0x162>
				 else if (j==2) return '3'; 
 1e4:	83 e3       	ldi	r24, 0x33	; 51
 1e6:	0f c0       	rjmp	.+30     	; 0x206 <KeyPadgetkeypressed+0x162>
				 else if (j==3) return '=';
 1e8:	8d e3       	ldi	r24, 0x3D	; 61
 1ea:	0d c0       	rjmp	.+26     	; 0x206 <KeyPadgetkeypressed+0x162>
			     } 
				 
				 
				 case (3):
			     { 
				 if(j==0) return '/' ;	
 1ec:	8f e2       	ldi	r24, 0x2F	; 47
 1ee:	0b c0       	rjmp	.+22     	; 0x206 <KeyPadgetkeypressed+0x162>
				 else if (j==1) return '*';
 1f0:	8a e2       	ldi	r24, 0x2A	; 42
 1f2:	09 c0       	rjmp	.+18     	; 0x206 <KeyPadgetkeypressed+0x162>
				 else if (j==2) return '-'; 
 1f4:	8d e2       	ldi	r24, 0x2D	; 45
 1f6:	07 c0       	rjmp	.+14     	; 0x206 <KeyPadgetkeypressed+0x162>
				 else if (j==3) return '+';
 1f8:	8b e2       	ldi	r24, 0x2B	; 43
 1fa:	05 c0       	rjmp	.+10     	; 0x206 <KeyPadgetkeypressed+0x162>
	int i , j ; 
	for (i = 0 ; i< 4 ; i++) 
	{ 
		KeyPadPort |= (1<<C0 | 1<<C1 | 1<<C2 | 1<<C3); 
		KeyPadPort &= ~(1<<colunms[i]); 
      for (j = 0;j<4;j++)
 1fc:	c4 30       	cpi	r28, 0x04	; 4
 1fe:	d1 05       	cpc	r29, r1
 200:	0c f4       	brge	.+2      	; 0x204 <KeyPadgetkeypressed+0x160>
 202:	71 cf       	rjmp	.-286    	; 0xe6 <KeyPadgetkeypressed+0x42>
		 }       
       
	 }
	
   } 
   return 'A' ;
 204:	81 e4       	ldi	r24, 0x41	; 65
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	1f 91       	pop	r17
 20c:	0f 91       	pop	r16
 20e:	08 95       	ret

00000210 <LCD_KICK>:




void LCD_KICK(void){
 DataDir_LCD_control |= (1<<EN_switch);
 210:	8a 9a       	sbi	0x11, 2	; 17
 LCD_control |= (1<<EN_switch) ; 
 212:	92 9a       	sbi	0x12, 2	; 18
 asm ("NOP");
 214:	00 00       	nop
 asm ("NOP"); 
 216:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 218:	8b e4       	ldi	r24, 0x4B	; 75
 21a:	9d e1       	ldi	r25, 0x1D	; 29
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <LCD_KICK+0xc>
 220:	00 c0       	rjmp	.+0      	; 0x222 <LCD_KICK+0x12>
 222:	00 00       	nop
 _delay_ms(30); 
 LCD_control &= ~(1<<EN_switch);  
 224:	92 98       	cbi	0x12, 2	; 18
 226:	08 95       	ret

00000228 <LCD_CHECK_LCD_ISBUSY>:
}  



void LCD_CHECK_LCD_ISBUSY(){
	DataDir_LCD_port = 0; 
 228:	1a ba       	out	0x1a, r1	; 26
	DataDir_LCD_control |= (1<<RS_switch | 1 <<EN_switch | 1<<ReadWrite); 
 22a:	81 b3       	in	r24, 0x11	; 17
 22c:	87 60       	ori	r24, 0x07	; 7
 22e:	81 bb       	out	0x11, r24	; 17
	LCD_control &= ~(1<<RS_switch); 
 230:	90 98       	cbi	0x12, 0	; 18
	LCD_control |= (1<<ReadWrite);  
 232:	91 9a       	sbi	0x12, 1	; 18
	LCD_KICK(); 
 234:	0e 94 08 01 	call	0x210	; 0x210 <LCD_KICK>
	DataDir_LCD_port = 0xff; 
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	8a bb       	out	0x1a, r24	; 26
	LCD_control &= ~(1<<ReadWrite); 
 23c:	91 98       	cbi	0x12, 1	; 18
 23e:	08 95       	ret

00000240 <LCD_SEND_A_COMMAND>:





void LCD_SEND_A_COMMAND (char command){ 
 240:	cf 93       	push	r28
 242:	c8 2f       	mov	r28, r24
	
	LCD_CHECK_LCD_ISBUSY(); 
 244:	0e 94 14 01 	call	0x228	; 0x228 <LCD_CHECK_LCD_ISBUSY>
	 
	LCD_control &= ~(1<<RS_switch);  
 248:	90 98       	cbi	0x12, 0	; 18
	LCD_control &= ~(1<<ReadWrite);  
 24a:	91 98       	cbi	0x12, 1	; 18
	
	LCD_port = command ; 
 24c:	cb bb       	out	0x1b, r28	; 27
	LCD_KICK(); 
 24e:	0e 94 08 01 	call	0x210	; 0x210 <LCD_KICK>
}
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <LCD_CLEAR>:
}  

 
 void LCD_CLEAR(void){
	 
	 LCD_SEND_A_COMMAND(LCD_CLEAR_SCREEN); 
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 20 01 	call	0x240	; 0x240 <LCD_SEND_A_COMMAND>
 25c:	08 95       	ret

0000025e <LCD_INIT>:
 25e:	83 ec       	ldi	r24, 0xC3	; 195
 260:	99 e0       	ldi	r25, 0x09	; 9
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <LCD_INIT+0x4>
 266:	00 c0       	rjmp	.+0      	; 0x268 <LCD_INIT+0xa>
 268:	00 00       	nop


void LCD_INIT(void){ 
	
	_delay_ms(10);  
	DataDir_LCD_control |= (1<<EN_switch | 1<<ReadWrite | 1<<RS_switch) ;
 26a:	81 b3       	in	r24, 0x11	; 17
 26c:	87 60       	ori	r24, 0x07	; 7
 26e:	81 bb       	out	0x11, r24	; 17
	DataDir_LCD_port = 0xff; 
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	8a bb       	out	0x1a, r24	; 26
	LCD_control &= ~(1<<EN_switch | 1<<ReadWrite | 1<<RS_switch) ; 
 274:	82 b3       	in	r24, 0x12	; 18
 276:	88 7f       	andi	r24, 0xF8	; 248
 278:	82 bb       	out	0x12, r24	; 18
 27a:	87 e8       	ldi	r24, 0x87	; 135
 27c:	93 e1       	ldi	r25, 0x13	; 19
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <LCD_INIT+0x20>
 282:	00 c0       	rjmp	.+0      	; 0x284 <LCD_INIT+0x26>
 284:	00 00       	nop
	_delay_ms(20);
	 LCD_CLEAR(); 
 286:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_CLEAR>
	#ifdef EIGHT_BIT_MODE
	LCD_SEND_A_COMMAND(LCD_FUNCTION_8BIT_2LINES); 
 28a:	88 e3       	ldi	r24, 0x38	; 56
 28c:	0e 94 20 01 	call	0x240	; 0x240 <LCD_SEND_A_COMMAND>
    #endif

   
	
	LCD_SEND_A_COMMAND(LCD_ENTRY_MODE); 
 290:	86 e0       	ldi	r24, 0x06	; 6
 292:	0e 94 20 01 	call	0x240	; 0x240 <LCD_SEND_A_COMMAND>
	LCD_SEND_A_COMMAND(LCD_BEGIN_AT_FIRST_RAW); 
 296:	80 e8       	ldi	r24, 0x80	; 128
 298:	0e 94 20 01 	call	0x240	; 0x240 <LCD_SEND_A_COMMAND>
    LCD_SEND_A_COMMAND(LCD_DISP_ON  ); 
 29c:	8c e0       	ldi	r24, 0x0C	; 12
 29e:	0e 94 20 01 	call	0x240	; 0x240 <LCD_SEND_A_COMMAND>
 2a2:	08 95       	ret

000002a4 <LCD_SEND_A_CHAR>:
} 



void LCD_SEND_A_CHAR (unsigned char character){
 2a4:	cf 93       	push	r28
 2a6:	c8 2f       	mov	r28, r24
	
	#ifdef EIGHT_BIT_MODE 
	LCD_CHECK_LCD_ISBUSY(); 
 2a8:	0e 94 14 01 	call	0x228	; 0x228 <LCD_CHECK_LCD_ISBUSY>
	LCD_control |= (1<<RS_switch);  
 2ac:	90 9a       	sbi	0x12, 0	; 18
	LCD_port = character; 
 2ae:	cb bb       	out	0x1b, r28	; 27
	LCD_KICK(); 
 2b0:	0e 94 08 01 	call	0x210	; 0x210 <LCD_KICK>
    #endif
}  
 2b4:	cf 91       	pop	r28
 2b6:	08 95       	ret

000002b8 <LCD_GOTO_XY>:
	LCD_control &= ~(1<<ReadWrite); 
} 


void LCD_GOTO_XY(unsigned char line , unsigned char position ) {
	if (line==0)
 2b8:	81 11       	cpse	r24, r1
 2ba:	05 c0       	rjmp	.+10     	; 0x2c6 <LCD_GOTO_XY+0xe>
	{ 
		LCD_SEND_A_COMMAND(0x80+position); 
 2bc:	80 e8       	ldi	r24, 0x80	; 128
 2be:	86 0f       	add	r24, r22
 2c0:	0e 94 20 01 	call	0x240	; 0x240 <LCD_SEND_A_COMMAND>
 2c4:	08 95       	ret
	}
	if (line==1)
 2c6:	81 30       	cpi	r24, 0x01	; 1
 2c8:	21 f4       	brne	.+8      	; 0x2d2 <LCD_GOTO_XY+0x1a>
	{ 
		LCD_SEND_A_COMMAND(0xc0+position); 
 2ca:	80 ec       	ldi	r24, 0xC0	; 192
 2cc:	86 0f       	add	r24, r22
 2ce:	0e 94 20 01 	call	0x240	; 0x240 <LCD_SEND_A_COMMAND>
 2d2:	08 95       	ret

000002d4 <LCD_SEND_A_STRING>:
	
} 



void LCD_SEND_A_STRING(char* string) {
 2d4:	0f 93       	push	r16
 2d6:	1f 93       	push	r17
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	8c 01       	movw	r16, r24
	
	int i=0 ;  
	int count = 0 ; 
 2de:	c0 e0       	ldi	r28, 0x00	; 0
 2e0:	d0 e0       	ldi	r29, 0x00	; 0
	while (string[i] != 00 )
 2e2:	14 c0       	rjmp	.+40     	; 0x30c <LCD_SEND_A_STRING+0x38>
	{ 
		LCD_SEND_A_CHAR(string[i]);  
 2e4:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_SEND_A_CHAR>
		i++;    
		count++;
 2e8:	21 96       	adiw	r28, 0x01	; 1
		if (count==16 )
 2ea:	c0 31       	cpi	r28, 0x10	; 16
 2ec:	d1 05       	cpc	r29, r1
 2ee:	21 f4       	brne	.+8      	; 0x2f8 <LCD_SEND_A_STRING+0x24>
	{ 
		LCD_SEND_A_COMMAND(0x80+position); 
	}
	if (line==1)
	{ 
		LCD_SEND_A_COMMAND(0xc0+position); 
 2f0:	80 ec       	ldi	r24, 0xC0	; 192
 2f2:	0e 94 20 01 	call	0x240	; 0x240 <LCD_SEND_A_COMMAND>
 2f6:	0a c0       	rjmp	.+20     	; 0x30c <LCD_SEND_A_STRING+0x38>
		if (count==16 )
		{  
			LCD_GOTO_XY(1,0);
			
		} 
		if (count==32)
 2f8:	c0 32       	cpi	r28, 0x20	; 32
 2fa:	d1 05       	cpc	r29, r1
 2fc:	39 f4       	brne	.+14     	; 0x30c <LCD_SEND_A_STRING+0x38>
		{  
			LCD_CLEAR();  
 2fe:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_CLEAR>


void LCD_GOTO_XY(unsigned char line , unsigned char position ) {
	if (line==0)
	{ 
		LCD_SEND_A_COMMAND(0x80+position); 
 302:	80 e8       	ldi	r24, 0x80	; 128
 304:	0e 94 20 01 	call	0x240	; 0x240 <LCD_SEND_A_COMMAND>
		} 
		if (count==32)
		{  
			LCD_CLEAR();  
			LCD_GOTO_XY(0,0); 
			count = 0;
 308:	c0 e0       	ldi	r28, 0x00	; 0
 30a:	d0 e0       	ldi	r29, 0x00	; 0

void LCD_SEND_A_STRING(char* string) {
	
	int i=0 ;  
	int count = 0 ; 
	while (string[i] != 00 )
 30c:	f8 01       	movw	r30, r16
 30e:	81 91       	ld	r24, Z+
 310:	8f 01       	movw	r16, r30
 312:	81 11       	cpse	r24, r1
 314:	e7 cf       	rjmp	.-50     	; 0x2e4 <LCD_SEND_A_STRING+0x10>
		}
	}
	
	
	
} 
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	1f 91       	pop	r17
 31c:	0f 91       	pop	r16
 31e:	08 95       	ret

00000320 <LCD_SEND_INT>:
	LCD_SEND_A_CHAR((char)(number+48));
	
  
}
*/	  
void LCD_SEND_INT (int number){
 320:	0f 93       	push	r16
 322:	1f 93       	push	r17
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
 32c:	27 97       	sbiw	r28, 0x07	; 7
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	f8 94       	cli
 332:	de bf       	out	0x3e, r29	; 62
 334:	0f be       	out	0x3f, r0	; 63
 336:	cd bf       	out	0x3d, r28	; 61
	
	char str[7]; 
	sprintf(str, "%2d" ,number); 
 338:	9f 93       	push	r25
 33a:	8f 93       	push	r24
 33c:	82 e7       	ldi	r24, 0x72	; 114
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	9f 93       	push	r25
 342:	8f 93       	push	r24
 344:	8e 01       	movw	r16, r28
 346:	0f 5f       	subi	r16, 0xFF	; 255
 348:	1f 4f       	sbci	r17, 0xFF	; 255
 34a:	1f 93       	push	r17
 34c:	0f 93       	push	r16
 34e:	0e 94 9d 03 	call	0x73a	; 0x73a <sprintf>
	LCD_SEND_A_STRING(str); 
 352:	c8 01       	movw	r24, r16
 354:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LCD_SEND_A_STRING>

} 
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	0f 90       	pop	r0
 35e:	0f 90       	pop	r0
 360:	0f 90       	pop	r0
 362:	0f 90       	pop	r0
 364:	27 96       	adiw	r28, 0x07	; 7
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	f8 94       	cli
 36a:	de bf       	out	0x3e, r29	; 62
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	cd bf       	out	0x3d, r28	; 61
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	1f 91       	pop	r17
 376:	0f 91       	pop	r16
 378:	08 95       	ret

0000037a <LCD_UPDATE_SEC>:
	
}



void LCD_UPDATE_SEC( int s) {
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	ec 01       	movw	r28, r24

	LCD_GOTO_XY(0,6);
 380:	66 e0       	ldi	r22, 0x06	; 6
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_GOTO_XY>
	
	LCD_SEND_INT(s);
 388:	ce 01       	movw	r24, r28
 38a:	0e 94 90 01 	call	0x320	; 0x320 <LCD_SEND_INT>
}
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	08 95       	ret

00000394 <LCD_UPDATE_MIN>:

void LCD_UPDATE_MIN( int m) {
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	ec 01       	movw	r28, r24
	
	LCD_GOTO_XY(0,3);
 39a:	63 e0       	ldi	r22, 0x03	; 3
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_GOTO_XY>
	
	LCD_SEND_INT(m);
 3a2:	ce 01       	movw	r24, r28
 3a4:	0e 94 90 01 	call	0x320	; 0x320 <LCD_SEND_INT>
}
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret

000003ae <LCD_UPDATE_HOUR>:

void LCD_UPDATE_HOUR( int h) {
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
 3b2:	ec 01       	movw	r28, r24
	
	LCD_GOTO_XY(0,0);
 3b4:	60 e0       	ldi	r22, 0x00	; 0
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_GOTO_XY>
	
	LCD_SEND_INT(h);
 3bc:	ce 01       	movw	r24, r28
 3be:	0e 94 90 01 	call	0x320	; 0x320 <LCD_SEND_INT>
} 
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	08 95       	ret

000003c8 <LCD_UPDATE_MODE>:


void LCD_UPDATE_MODE (char M[]){ 
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	ec 01       	movw	r28, r24
	LCD_GOTO_XY(0,9);
 3ce:	69 e0       	ldi	r22, 0x09	; 9
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_GOTO_XY>
	LCD_SEND_A_STRING(M);
 3d6:	ce 01       	movw	r24, r28
 3d8:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LCD_SEND_A_STRING>
	
}
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	08 95       	ret

000003e2 <LCD_UPATE_CLOCK>:




void LCD_UPATE_CLOCK (void){
	LCD_UPDATE_HOUR(P->HOUR);
 3e2:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <P>
 3e6:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <P+0x1>
 3ea:	84 81       	ldd	r24, Z+4	; 0x04
 3ec:	95 81       	ldd	r25, Z+5	; 0x05
 3ee:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_UPDATE_HOUR>
	LCD_GOTO_XY(0,2);
 3f2:	62 e0       	ldi	r22, 0x02	; 2
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_GOTO_XY>
	LCD_SEND_A_STRING(":");
 3fa:	80 e8       	ldi	r24, 0x80	; 128
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LCD_SEND_A_STRING>
	LCD_UPDATE_MIN(P->MIN);
 402:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <P>
 406:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <P+0x1>
 40a:	82 81       	ldd	r24, Z+2	; 0x02
 40c:	93 81       	ldd	r25, Z+3	; 0x03
 40e:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_UPDATE_MIN>
	LCD_GOTO_XY(0,5);
 412:	65 e0       	ldi	r22, 0x05	; 5
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_GOTO_XY>
	LCD_SEND_A_STRING(":");
 41a:	80 e8       	ldi	r24, 0x80	; 128
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LCD_SEND_A_STRING>
	LCD_UPDATE_SEC(P->SEC);
 422:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <P>
 426:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <P+0x1>
 42a:	80 81       	ld	r24, Z
 42c:	91 81       	ldd	r25, Z+1	; 0x01
 42e:	0e 94 bd 01 	call	0x37a	; 0x37a <LCD_UPDATE_SEC>
	LCD_UPDATE_MODE(P->Mode); 
 432:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <P>
 436:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <P+0x1>
 43a:	86 81       	ldd	r24, Z+6	; 0x06
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_UPDATE_MODE>
 442:	08 95       	ret

00000444 <clock_EDITp>:

// update the clock while  increasing 
void clock_EDITp (void) { 
	
	
	if (P->SEC == 60){
 444:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <P>
 448:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <P+0x1>
 44c:	80 81       	ld	r24, Z
 44e:	91 81       	ldd	r25, Z+1	; 0x01
 450:	cc 97       	sbiw	r24, 0x3c	; 60
 452:	69 f4       	brne	.+26     	; 0x46e <__stack+0xf>
		(P->SEC) = 1 ;
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	91 83       	std	Z+1, r25	; 0x01
 45a:	80 83       	st	Z, r24
		(P->MIN)++;  
 45c:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <P>
 460:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <P+0x1>
 464:	82 81       	ldd	r24, Z+2	; 0x02
 466:	93 81       	ldd	r25, Z+3	; 0x03
 468:	01 96       	adiw	r24, 0x01	; 1
 46a:	93 83       	std	Z+3, r25	; 0x03
 46c:	82 83       	std	Z+2, r24	; 0x02
	} 
	
	if (P->MIN == 60)
 46e:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <P>
 472:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <P+0x1>
 476:	82 81       	ldd	r24, Z+2	; 0x02
 478:	93 81       	ldd	r25, Z+3	; 0x03
 47a:	cc 97       	sbiw	r24, 0x3c	; 60
 47c:	49 f4       	brne	.+18     	; 0x490 <__stack+0x31>
	{
		(P->MIN) = 1 ;
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	93 83       	std	Z+3, r25	; 0x03
 484:	82 83       	std	Z+2, r24	; 0x02
		(P->HOUR)++;
 486:	84 81       	ldd	r24, Z+4	; 0x04
 488:	95 81       	ldd	r25, Z+5	; 0x05
 48a:	01 96       	adiw	r24, 0x01	; 1
 48c:	95 83       	std	Z+5, r25	; 0x05
 48e:	84 83       	std	Z+4, r24	; 0x04
	} 
	
	if (P->HOUR >= 13) {
 490:	84 81       	ldd	r24, Z+4	; 0x04
 492:	95 81       	ldd	r25, Z+5	; 0x05
 494:	0d 97       	sbiw	r24, 0x0d	; 13
 496:	a4 f0       	brlt	.+40     	; 0x4c0 <__stack+0x61>
		P->HOUR = 1 ;
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	95 83       	std	Z+5, r25	; 0x05
 49e:	84 83       	std	Z+4, r24	; 0x04
		if (P->Mode == "PM") P->Mode = "AM";
 4a0:	86 81       	ldd	r24, Z+6	; 0x06
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	20 e0       	ldi	r18, 0x00	; 0
 4a6:	82 38       	cpi	r24, 0x82	; 130
 4a8:	92 07       	cpc	r25, r18
 4aa:	21 f4       	brne	.+8      	; 0x4b4 <__stack+0x55>
 4ac:	85 e8       	ldi	r24, 0x85	; 133
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	86 83       	std	Z+6, r24	; 0x06
 4b2:	06 c0       	rjmp	.+12     	; 0x4c0 <__stack+0x61>
		else if (P->Mode == "AM") P->Mode = "PM";
 4b4:	85 58       	subi	r24, 0x85	; 133
 4b6:	90 40       	sbci	r25, 0x00	; 0
 4b8:	19 f4       	brne	.+6      	; 0x4c0 <__stack+0x61>
 4ba:	82 e8       	ldi	r24, 0x82	; 130
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	86 83       	std	Z+6, r24	; 0x06
	} 
	
	
  LCD_UPATE_CLOCK(); 
 4c0:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_UPATE_CLOCK>
 4c4:	08 95       	ret

000004c6 <clock_EDITn>:
 
 
 // update the clock while dcrasing 
void clock_EDITn (void){
	
	if (P->SEC == 0){
 4c6:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <P>
 4ca:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <P+0x1>
 4ce:	80 81       	ld	r24, Z
 4d0:	91 81       	ldd	r25, Z+1	; 0x01
 4d2:	89 2b       	or	r24, r25
 4d4:	69 f4       	brne	.+26     	; 0x4f0 <clock_EDITn+0x2a>
		(P->SEC) = 59 ;
 4d6:	8b e3       	ldi	r24, 0x3B	; 59
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	91 83       	std	Z+1, r25	; 0x01
 4dc:	80 83       	st	Z, r24
		(P->MIN)--; 
 4de:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <P>
 4e2:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <P+0x1>
 4e6:	82 81       	ldd	r24, Z+2	; 0x02
 4e8:	93 81       	ldd	r25, Z+3	; 0x03
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	93 83       	std	Z+3, r25	; 0x03
 4ee:	82 83       	std	Z+2, r24	; 0x02
	}  
	
	if (P->MIN == 0){
 4f0:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <P>
 4f4:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <P+0x1>
 4f8:	82 81       	ldd	r24, Z+2	; 0x02
 4fa:	93 81       	ldd	r25, Z+3	; 0x03
 4fc:	89 2b       	or	r24, r25
 4fe:	49 f4       	brne	.+18     	; 0x512 <clock_EDITn+0x4c>
		(P->MIN) = 59;
 500:	8b e3       	ldi	r24, 0x3B	; 59
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	93 83       	std	Z+3, r25	; 0x03
 506:	82 83       	std	Z+2, r24	; 0x02
		(P->HOUR)--; 
 508:	84 81       	ldd	r24, Z+4	; 0x04
 50a:	95 81       	ldd	r25, Z+5	; 0x05
 50c:	01 97       	sbiw	r24, 0x01	; 1
 50e:	95 83       	std	Z+5, r25	; 0x05
 510:	84 83       	std	Z+4, r24	; 0x04
	}
		
		
	if((P->HOUR ) == 0 ){
 512:	84 81       	ldd	r24, Z+4	; 0x04
 514:	95 81       	ldd	r25, Z+5	; 0x05
 516:	89 2b       	or	r24, r25
 518:	a1 f4       	brne	.+40     	; 0x542 <clock_EDITn+0x7c>
		P->HOUR = 12 ;
 51a:	8c e0       	ldi	r24, 0x0C	; 12
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	95 83       	std	Z+5, r25	; 0x05
 520:	84 83       	std	Z+4, r24	; 0x04
		if (P->Mode == "PM") P->Mode = "AM";
 522:	86 81       	ldd	r24, Z+6	; 0x06
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	20 e0       	ldi	r18, 0x00	; 0
 528:	82 38       	cpi	r24, 0x82	; 130
 52a:	92 07       	cpc	r25, r18
 52c:	21 f4       	brne	.+8      	; 0x536 <clock_EDITn+0x70>
 52e:	85 e8       	ldi	r24, 0x85	; 133
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	86 83       	std	Z+6, r24	; 0x06
 534:	06 c0       	rjmp	.+12     	; 0x542 <clock_EDITn+0x7c>
		else if (P->Mode == "AM") P->Mode = "PM"; 
 536:	85 58       	subi	r24, 0x85	; 133
 538:	90 40       	sbci	r25, 0x00	; 0
 53a:	19 f4       	brne	.+6      	; 0x542 <clock_EDITn+0x7c>
 53c:	82 e8       	ldi	r24, 0x82	; 130
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	86 83       	std	Z+6, r24	; 0x06
	}
	
	LCD_UPATE_CLOCK(); 
 542:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_UPATE_CLOCK>
 546:	08 95       	ret

00000548 <main>:

int main(void) {
	
	int i ;
	// interfaces
	LCD_INIT();
 548:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_INIT>
	KeyPadInit();
 54c:	0e 94 49 00 	call	0x92	; 0x92 <KeyPadInit>
	
	// clock initializations 
	P->HOUR = 12 ;
 550:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <P>
 554:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <P+0x1>
 558:	8c e0       	ldi	r24, 0x0C	; 12
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	95 83       	std	Z+5, r25	; 0x05
 55e:	84 83       	std	Z+4, r24	; 0x04
	P->MIN = 59 ;
 560:	8b e3       	ldi	r24, 0x3B	; 59
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	93 83       	std	Z+3, r25	; 0x03
 566:	82 83       	std	Z+2, r24	; 0x02
	P->SEC = 50; 
 568:	82 e3       	ldi	r24, 0x32	; 50
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	91 83       	std	Z+1, r25	; 0x01
 56e:	80 83       	st	Z, r24
	P->Mode = "AM"; 
 570:	85 e8       	ldi	r24, 0x85	; 133
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	d8 2f       	mov	r29, r24
 576:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <P>
 57a:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <P+0x1>
 57e:	86 83       	std	Z+6, r24	; 0x06
			(P->SEC)++;
			LCD_UPATE_CLOCK ();
			
			if (P->SEC == 59)
			{
				(P->SEC) = 1 ;
 580:	01 e0       	ldi	r16, 0x01	; 1
 582:	10 e0       	ldi	r17, 0x00	; 0
				(P->MIN) = 1 ; 
				(P->HOUR)++;
				if (P->HOUR >= 12) {
					P->HOUR = 1 ; 
					if (P->Mode == "PM") P->Mode = "AM";
				   else if (P->Mode == "AM") P->Mode = "PM";
 584:	0f 2e       	mov	r0, r31
 586:	f2 e8       	ldi	r31, 0x82	; 130
 588:	ef 2e       	mov	r14, r31
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	ff 2e       	mov	r15, r31
 58e:	f0 2d       	mov	r31, r0
	// FLAGS TO ENTER THE DIFFERENT MODES
	char x , y ;
	
	while (1)
	{
		y = x = KeyPadgetkeypressed();
 590:	0e 94 52 00 	call	0xa4	; 0xa4 <KeyPadgetkeypressed>
		
		
		// CLOCK MODE
		while ( x == 'A' )
 594:	81 34       	cpi	r24, 0x41	; 65
 596:	09 f0       	breq	.+2      	; 0x59a <main+0x52>
 598:	cc c0       	rjmp	.+408    	; 0x732 <main+0x1ea>
		{
			x = KeyPadgetkeypressed();
 59a:	0e 94 52 00 	call	0xa4	; 0xa4 <KeyPadgetkeypressed>
 59e:	c8 2f       	mov	r28, r24
			(P->SEC)++;
 5a0:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <P>
 5a4:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <P+0x1>
 5a8:	80 81       	ld	r24, Z
 5aa:	91 81       	ldd	r25, Z+1	; 0x01
 5ac:	01 96       	adiw	r24, 0x01	; 1
 5ae:	91 83       	std	Z+1, r25	; 0x01
 5b0:	80 83       	st	Z, r24
			LCD_UPATE_CLOCK ();
 5b2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_UPATE_CLOCK>
			
			if (P->SEC == 59)
 5b6:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <P>
 5ba:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <P+0x1>
 5be:	80 81       	ld	r24, Z
 5c0:	91 81       	ldd	r25, Z+1	; 0x01
 5c2:	cb 97       	sbiw	r24, 0x3b	; 59
 5c4:	69 f4       	brne	.+26     	; 0x5e0 <main+0x98>
			{
				(P->SEC) = 1 ;
 5c6:	11 83       	std	Z+1, r17	; 0x01
 5c8:	00 83       	st	Z, r16
				(P->MIN)++;
 5ca:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <P>
 5ce:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <P+0x1>
 5d2:	82 81       	ldd	r24, Z+2	; 0x02
 5d4:	93 81       	ldd	r25, Z+3	; 0x03
 5d6:	01 96       	adiw	r24, 0x01	; 1
 5d8:	93 83       	std	Z+3, r25	; 0x03
 5da:	82 83       	std	Z+2, r24	; 0x02
				LCD_UPATE_CLOCK ();
 5dc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_UPATE_CLOCK>
			} 
			
			// changing in minutes 
			if (P->MIN == 59)
 5e0:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <P>
 5e4:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <P+0x1>
 5e8:	82 81       	ldd	r24, Z+2	; 0x02
 5ea:	93 81       	ldd	r25, Z+3	; 0x03
 5ec:	cb 97       	sbiw	r24, 0x3b	; 59
 5ee:	e9 f4       	brne	.+58     	; 0x62a <main+0xe2>
			{
				(P->MIN) = 1 ; 
 5f0:	13 83       	std	Z+3, r17	; 0x03
 5f2:	02 83       	std	Z+2, r16	; 0x02
				(P->HOUR)++;
 5f4:	84 81       	ldd	r24, Z+4	; 0x04
 5f6:	95 81       	ldd	r25, Z+5	; 0x05
 5f8:	01 96       	adiw	r24, 0x01	; 1
				if (P->HOUR >= 12) {
 5fa:	8c 30       	cpi	r24, 0x0C	; 12
 5fc:	91 05       	cpc	r25, r1
 5fe:	1c f4       	brge	.+6      	; 0x606 <main+0xbe>
			
			// changing in minutes 
			if (P->MIN == 59)
			{
				(P->MIN) = 1 ; 
				(P->HOUR)++;
 600:	95 83       	std	Z+5, r25	; 0x05
 602:	84 83       	std	Z+4, r24	; 0x04
 604:	0e c0       	rjmp	.+28     	; 0x622 <main+0xda>
				if (P->HOUR >= 12) {
					P->HOUR = 1 ; 
 606:	15 83       	std	Z+5, r17	; 0x05
 608:	04 83       	std	Z+4, r16	; 0x04
					if (P->Mode == "PM") P->Mode = "AM";
 60a:	86 81       	ldd	r24, Z+6	; 0x06
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	20 e0       	ldi	r18, 0x00	; 0
 610:	82 38       	cpi	r24, 0x82	; 130
 612:	92 07       	cpc	r25, r18
 614:	11 f4       	brne	.+4      	; 0x61a <main+0xd2>
 616:	d6 83       	std	Z+6, r29	; 0x06
 618:	04 c0       	rjmp	.+8      	; 0x622 <main+0xda>
				   else if (P->Mode == "AM") P->Mode = "PM";
 61a:	85 58       	subi	r24, 0x85	; 133
 61c:	90 40       	sbci	r25, 0x00	; 0
 61e:	09 f4       	brne	.+2      	; 0x622 <main+0xda>
 620:	e6 82       	std	Z+6, r14	; 0x06
					} 
					LCD_UPATE_CLOCK ();
 622:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_UPATE_CLOCK>
				 
				
				LCD_UPATE_CLOCK ();
 626:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_UPATE_CLOCK>
			} 
			
			// changing in hours 
			
			if (P->HOUR >= 12){ 
 62a:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <P>
 62e:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <P+0x1>
 632:	84 81       	ldd	r24, Z+4	; 0x04
 634:	95 81       	ldd	r25, Z+5	; 0x05
 636:	0c 97       	sbiw	r24, 0x0c	; 12
 638:	84 f0       	brlt	.+32     	; 0x65a <main+0x112>
				P->HOUR = 1 ; 
 63a:	15 83       	std	Z+5, r17	; 0x05
 63c:	04 83       	std	Z+4, r16	; 0x04
				if (P->Mode =="PM") P->Mode = "AM";
 63e:	86 81       	ldd	r24, Z+6	; 0x06
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	20 e0       	ldi	r18, 0x00	; 0
 644:	82 38       	cpi	r24, 0x82	; 130
 646:	92 07       	cpc	r25, r18
 648:	11 f4       	brne	.+4      	; 0x64e <main+0x106>
 64a:	d6 83       	std	Z+6, r29	; 0x06
 64c:	04 c0       	rjmp	.+8      	; 0x656 <main+0x10e>
				else if (P->Mode == "AM") P->Mode = "PM";
 64e:	85 58       	subi	r24, 0x85	; 133
 650:	90 40       	sbci	r25, 0x00	; 0
 652:	09 f4       	brne	.+2      	; 0x656 <main+0x10e>
 654:	e6 82       	std	Z+6, r14	; 0x06
				LCD_UPATE_CLOCK ();
 656:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_UPATE_CLOCK>
			} 
			
			 
			
			// flag to switch between to modes 
			if (x == '8') break;
 65a:	c1 34       	cpi	r28, 0x41	; 65
 65c:	09 f4       	brne	.+2      	; 0x660 <main+0x118>
 65e:	9d cf       	rjmp	.-198    	; 0x59a <main+0x52>
		
		
		// EDIT MODE 
		while (y != '8')
		{
			y =KeyPadgetkeypressed();
 660:	0e 94 52 00 	call	0xa4	; 0xa4 <KeyPadgetkeypressed>
 664:	c8 2f       	mov	r28, r24
			LCD_UPATE_CLOCK ();
 666:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_UPATE_CLOCK>
			
			// EDIT SEC PRESS 7 to increase , press 4 to decrease  
			if (y == '7') {
 66a:	c7 33       	cpi	r28, 0x37	; 55
 66c:	71 f4       	brne	.+28     	; 0x68a <main+0x142>
				P->SEC++;
 66e:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <P>
 672:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <P+0x1>
 676:	80 81       	ld	r24, Z
 678:	91 81       	ldd	r25, Z+1	; 0x01
 67a:	01 96       	adiw	r24, 0x01	; 1
 67c:	91 83       	std	Z+1, r25	; 0x01
 67e:	80 83       	st	Z, r24
				clock_EDITp();
 680:	0e 94 22 02 	call	0x444	; 0x444 <clock_EDITp>
				LCD_UPATE_CLOCK();	
 684:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_UPATE_CLOCK>
 688:	50 c0       	rjmp	.+160    	; 0x72a <main+0x1e2>
			}
			else if ( y == '4' )
 68a:	c4 33       	cpi	r28, 0x34	; 52
 68c:	71 f4       	brne	.+28     	; 0x6aa <main+0x162>
			{
				P->SEC--;
 68e:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <P>
 692:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <P+0x1>
 696:	80 81       	ld	r24, Z
 698:	91 81       	ldd	r25, Z+1	; 0x01
 69a:	01 97       	sbiw	r24, 0x01	; 1
 69c:	91 83       	std	Z+1, r25	; 0x01
 69e:	80 83       	st	Z, r24
				clock_EDITn();
 6a0:	0e 94 63 02 	call	0x4c6	; 0x4c6 <clock_EDITn>
				LCD_UPATE_CLOCK();
 6a4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_UPATE_CLOCK>
 6a8:	40 c0       	rjmp	.+128    	; 0x72a <main+0x1e2>
			}
			
			
			// EDIT MINUTES Pres 9 to increase pres 6 to decrease 
			if (y == '9') {
 6aa:	c9 33       	cpi	r28, 0x39	; 57
 6ac:	71 f4       	brne	.+28     	; 0x6ca <main+0x182>
				
				P->MIN++; 
 6ae:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <P>
 6b2:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <P+0x1>
 6b6:	82 81       	ldd	r24, Z+2	; 0x02
 6b8:	93 81       	ldd	r25, Z+3	; 0x03
 6ba:	01 96       	adiw	r24, 0x01	; 1
 6bc:	93 83       	std	Z+3, r25	; 0x03
 6be:	82 83       	std	Z+2, r24	; 0x02
				clock_EDITp(); 
 6c0:	0e 94 22 02 	call	0x444	; 0x444 <clock_EDITp>
				LCD_UPATE_CLOCK();
 6c4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_UPATE_CLOCK>
 6c8:	cb cf       	rjmp	.-106    	; 0x660 <main+0x118>
				
			}
			else if ( y == '6' )
 6ca:	c6 33       	cpi	r28, 0x36	; 54
 6cc:	71 f4       	brne	.+28     	; 0x6ea <main+0x1a2>
			{
				P->MIN--; 
 6ce:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <P>
 6d2:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <P+0x1>
 6d6:	82 81       	ldd	r24, Z+2	; 0x02
 6d8:	93 81       	ldd	r25, Z+3	; 0x03
 6da:	01 97       	sbiw	r24, 0x01	; 1
 6dc:	93 83       	std	Z+3, r25	; 0x03
 6de:	82 83       	std	Z+2, r24	; 0x02
				clock_EDITn(); 
 6e0:	0e 94 63 02 	call	0x4c6	; 0x4c6 <clock_EDITn>
				LCD_UPATE_CLOCK ();
 6e4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_UPATE_CLOCK>
 6e8:	bb cf       	rjmp	.-138    	; 0x660 <main+0x118>
			}
			
				
			//Edit Hours 3 to increase and 1 to decrease 
			if (y == '3'){ 
 6ea:	c3 33       	cpi	r28, 0x33	; 51
 6ec:	71 f4       	brne	.+28     	; 0x70a <main+0x1c2>
				(P->HOUR)++; 
 6ee:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <P>
 6f2:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <P+0x1>
 6f6:	84 81       	ldd	r24, Z+4	; 0x04
 6f8:	95 81       	ldd	r25, Z+5	; 0x05
 6fa:	01 96       	adiw	r24, 0x01	; 1
 6fc:	95 83       	std	Z+5, r25	; 0x05
 6fe:	84 83       	std	Z+4, r24	; 0x04
				clock_EDITp(); 
 700:	0e 94 22 02 	call	0x444	; 0x444 <clock_EDITp>
			      LCD_UPATE_CLOCK ();
 704:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_UPATE_CLOCK>
 708:	ab cf       	rjmp	.-170    	; 0x660 <main+0x118>
			} 

			
			 else if (y == '1'){
 70a:	c1 33       	cpi	r28, 0x31	; 49
 70c:	71 f4       	brne	.+28     	; 0x72a <main+0x1e2>
				(P->HOUR)--;
 70e:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <P>
 712:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <P+0x1>
 716:	84 81       	ldd	r24, Z+4	; 0x04
 718:	95 81       	ldd	r25, Z+5	; 0x05
 71a:	01 97       	sbiw	r24, 0x01	; 1
 71c:	95 83       	std	Z+5, r25	; 0x05
 71e:	84 83       	std	Z+4, r24	; 0x04
				clock_EDITn();
 720:	0e 94 63 02 	call	0x4c6	; 0x4c6 <clock_EDITn>
				LCD_UPATE_CLOCK ();
 724:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_UPATE_CLOCK>
 728:	9b cf       	rjmp	.-202    	; 0x660 <main+0x118>
			}
				
			if (y == '8') break; 
 72a:	c8 33       	cpi	r28, 0x38	; 56
 72c:	09 f0       	breq	.+2      	; 0x730 <main+0x1e8>
 72e:	98 cf       	rjmp	.-208    	; 0x660 <main+0x118>
 730:	2f cf       	rjmp	.-418    	; 0x590 <main+0x48>
		
		//-----------------------------------------------------------------------------------------------------------------//
		
		
		// EDIT MODE 
		while (y != '8')
 732:	88 33       	cpi	r24, 0x38	; 56
 734:	09 f4       	brne	.+2      	; 0x738 <main+0x1f0>
 736:	2c cf       	rjmp	.-424    	; 0x590 <main+0x48>
 738:	93 cf       	rjmp	.-218    	; 0x660 <main+0x118>

0000073a <sprintf>:
 73a:	ae e0       	ldi	r26, 0x0E	; 14
 73c:	b0 e0       	ldi	r27, 0x00	; 0
 73e:	e3 ea       	ldi	r30, 0xA3	; 163
 740:	f3 e0       	ldi	r31, 0x03	; 3
 742:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <__prologue_saves__+0x1c>
 746:	0d 89       	ldd	r16, Y+21	; 0x15
 748:	1e 89       	ldd	r17, Y+22	; 0x16
 74a:	86 e0       	ldi	r24, 0x06	; 6
 74c:	8c 83       	std	Y+4, r24	; 0x04
 74e:	1a 83       	std	Y+2, r17	; 0x02
 750:	09 83       	std	Y+1, r16	; 0x01
 752:	8f ef       	ldi	r24, 0xFF	; 255
 754:	9f e7       	ldi	r25, 0x7F	; 127
 756:	9e 83       	std	Y+6, r25	; 0x06
 758:	8d 83       	std	Y+5, r24	; 0x05
 75a:	ae 01       	movw	r20, r28
 75c:	47 5e       	subi	r20, 0xE7	; 231
 75e:	5f 4f       	sbci	r21, 0xFF	; 255
 760:	6f 89       	ldd	r22, Y+23	; 0x17
 762:	78 8d       	ldd	r23, Y+24	; 0x18
 764:	ce 01       	movw	r24, r28
 766:	01 96       	adiw	r24, 0x01	; 1
 768:	0e 94 bf 03 	call	0x77e	; 0x77e <vfprintf>
 76c:	ef 81       	ldd	r30, Y+7	; 0x07
 76e:	f8 85       	ldd	r31, Y+8	; 0x08
 770:	e0 0f       	add	r30, r16
 772:	f1 1f       	adc	r31, r17
 774:	10 82       	st	Z, r1
 776:	2e 96       	adiw	r28, 0x0e	; 14
 778:	e4 e0       	ldi	r30, 0x04	; 4
 77a:	0c 94 7a 06 	jmp	0xcf4	; 0xcf4 <__epilogue_restores__+0x1c>

0000077e <vfprintf>:
 77e:	ab e0       	ldi	r26, 0x0B	; 11
 780:	b0 e0       	ldi	r27, 0x00	; 0
 782:	e5 ec       	ldi	r30, 0xC5	; 197
 784:	f3 e0       	ldi	r31, 0x03	; 3
 786:	0c 94 50 06 	jmp	0xca0	; 0xca0 <__prologue_saves__>
 78a:	6c 01       	movw	r12, r24
 78c:	7b 01       	movw	r14, r22
 78e:	8a 01       	movw	r16, r20
 790:	fc 01       	movw	r30, r24
 792:	17 82       	std	Z+7, r1	; 0x07
 794:	16 82       	std	Z+6, r1	; 0x06
 796:	83 81       	ldd	r24, Z+3	; 0x03
 798:	81 ff       	sbrs	r24, 1
 79a:	cc c1       	rjmp	.+920    	; 0xb34 <vfprintf+0x3b6>
 79c:	ce 01       	movw	r24, r28
 79e:	01 96       	adiw	r24, 0x01	; 1
 7a0:	3c 01       	movw	r6, r24
 7a2:	f6 01       	movw	r30, r12
 7a4:	93 81       	ldd	r25, Z+3	; 0x03
 7a6:	f7 01       	movw	r30, r14
 7a8:	93 fd       	sbrc	r25, 3
 7aa:	85 91       	lpm	r24, Z+
 7ac:	93 ff       	sbrs	r25, 3
 7ae:	81 91       	ld	r24, Z+
 7b0:	7f 01       	movw	r14, r30
 7b2:	88 23       	and	r24, r24
 7b4:	09 f4       	brne	.+2      	; 0x7b8 <vfprintf+0x3a>
 7b6:	ba c1       	rjmp	.+884    	; 0xb2c <vfprintf+0x3ae>
 7b8:	85 32       	cpi	r24, 0x25	; 37
 7ba:	39 f4       	brne	.+14     	; 0x7ca <vfprintf+0x4c>
 7bc:	93 fd       	sbrc	r25, 3
 7be:	85 91       	lpm	r24, Z+
 7c0:	93 ff       	sbrs	r25, 3
 7c2:	81 91       	ld	r24, Z+
 7c4:	7f 01       	movw	r14, r30
 7c6:	85 32       	cpi	r24, 0x25	; 37
 7c8:	29 f4       	brne	.+10     	; 0x7d4 <vfprintf+0x56>
 7ca:	b6 01       	movw	r22, r12
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	0e 94 b6 05 	call	0xb6c	; 0xb6c <fputc>
 7d2:	e7 cf       	rjmp	.-50     	; 0x7a2 <vfprintf+0x24>
 7d4:	91 2c       	mov	r9, r1
 7d6:	21 2c       	mov	r2, r1
 7d8:	31 2c       	mov	r3, r1
 7da:	ff e1       	ldi	r31, 0x1F	; 31
 7dc:	f3 15       	cp	r31, r3
 7de:	d8 f0       	brcs	.+54     	; 0x816 <vfprintf+0x98>
 7e0:	8b 32       	cpi	r24, 0x2B	; 43
 7e2:	79 f0       	breq	.+30     	; 0x802 <vfprintf+0x84>
 7e4:	38 f4       	brcc	.+14     	; 0x7f4 <vfprintf+0x76>
 7e6:	80 32       	cpi	r24, 0x20	; 32
 7e8:	79 f0       	breq	.+30     	; 0x808 <vfprintf+0x8a>
 7ea:	83 32       	cpi	r24, 0x23	; 35
 7ec:	a1 f4       	brne	.+40     	; 0x816 <vfprintf+0x98>
 7ee:	23 2d       	mov	r18, r3
 7f0:	20 61       	ori	r18, 0x10	; 16
 7f2:	1d c0       	rjmp	.+58     	; 0x82e <vfprintf+0xb0>
 7f4:	8d 32       	cpi	r24, 0x2D	; 45
 7f6:	61 f0       	breq	.+24     	; 0x810 <vfprintf+0x92>
 7f8:	80 33       	cpi	r24, 0x30	; 48
 7fa:	69 f4       	brne	.+26     	; 0x816 <vfprintf+0x98>
 7fc:	23 2d       	mov	r18, r3
 7fe:	21 60       	ori	r18, 0x01	; 1
 800:	16 c0       	rjmp	.+44     	; 0x82e <vfprintf+0xb0>
 802:	83 2d       	mov	r24, r3
 804:	82 60       	ori	r24, 0x02	; 2
 806:	38 2e       	mov	r3, r24
 808:	e3 2d       	mov	r30, r3
 80a:	e4 60       	ori	r30, 0x04	; 4
 80c:	3e 2e       	mov	r3, r30
 80e:	2a c0       	rjmp	.+84     	; 0x864 <vfprintf+0xe6>
 810:	f3 2d       	mov	r31, r3
 812:	f8 60       	ori	r31, 0x08	; 8
 814:	1d c0       	rjmp	.+58     	; 0x850 <vfprintf+0xd2>
 816:	37 fc       	sbrc	r3, 7
 818:	2d c0       	rjmp	.+90     	; 0x874 <vfprintf+0xf6>
 81a:	20 ed       	ldi	r18, 0xD0	; 208
 81c:	28 0f       	add	r18, r24
 81e:	2a 30       	cpi	r18, 0x0A	; 10
 820:	40 f0       	brcs	.+16     	; 0x832 <vfprintf+0xb4>
 822:	8e 32       	cpi	r24, 0x2E	; 46
 824:	b9 f4       	brne	.+46     	; 0x854 <vfprintf+0xd6>
 826:	36 fc       	sbrc	r3, 6
 828:	81 c1       	rjmp	.+770    	; 0xb2c <vfprintf+0x3ae>
 82a:	23 2d       	mov	r18, r3
 82c:	20 64       	ori	r18, 0x40	; 64
 82e:	32 2e       	mov	r3, r18
 830:	19 c0       	rjmp	.+50     	; 0x864 <vfprintf+0xe6>
 832:	36 fe       	sbrs	r3, 6
 834:	06 c0       	rjmp	.+12     	; 0x842 <vfprintf+0xc4>
 836:	8a e0       	ldi	r24, 0x0A	; 10
 838:	98 9e       	mul	r9, r24
 83a:	20 0d       	add	r18, r0
 83c:	11 24       	eor	r1, r1
 83e:	92 2e       	mov	r9, r18
 840:	11 c0       	rjmp	.+34     	; 0x864 <vfprintf+0xe6>
 842:	ea e0       	ldi	r30, 0x0A	; 10
 844:	2e 9e       	mul	r2, r30
 846:	20 0d       	add	r18, r0
 848:	11 24       	eor	r1, r1
 84a:	22 2e       	mov	r2, r18
 84c:	f3 2d       	mov	r31, r3
 84e:	f0 62       	ori	r31, 0x20	; 32
 850:	3f 2e       	mov	r3, r31
 852:	08 c0       	rjmp	.+16     	; 0x864 <vfprintf+0xe6>
 854:	8c 36       	cpi	r24, 0x6C	; 108
 856:	21 f4       	brne	.+8      	; 0x860 <vfprintf+0xe2>
 858:	83 2d       	mov	r24, r3
 85a:	80 68       	ori	r24, 0x80	; 128
 85c:	38 2e       	mov	r3, r24
 85e:	02 c0       	rjmp	.+4      	; 0x864 <vfprintf+0xe6>
 860:	88 36       	cpi	r24, 0x68	; 104
 862:	41 f4       	brne	.+16     	; 0x874 <vfprintf+0xf6>
 864:	f7 01       	movw	r30, r14
 866:	93 fd       	sbrc	r25, 3
 868:	85 91       	lpm	r24, Z+
 86a:	93 ff       	sbrs	r25, 3
 86c:	81 91       	ld	r24, Z+
 86e:	7f 01       	movw	r14, r30
 870:	81 11       	cpse	r24, r1
 872:	b3 cf       	rjmp	.-154    	; 0x7da <vfprintf+0x5c>
 874:	98 2f       	mov	r25, r24
 876:	9f 7d       	andi	r25, 0xDF	; 223
 878:	95 54       	subi	r25, 0x45	; 69
 87a:	93 30       	cpi	r25, 0x03	; 3
 87c:	28 f4       	brcc	.+10     	; 0x888 <vfprintf+0x10a>
 87e:	0c 5f       	subi	r16, 0xFC	; 252
 880:	1f 4f       	sbci	r17, 0xFF	; 255
 882:	9f e3       	ldi	r25, 0x3F	; 63
 884:	99 83       	std	Y+1, r25	; 0x01
 886:	0d c0       	rjmp	.+26     	; 0x8a2 <vfprintf+0x124>
 888:	83 36       	cpi	r24, 0x63	; 99
 88a:	31 f0       	breq	.+12     	; 0x898 <vfprintf+0x11a>
 88c:	83 37       	cpi	r24, 0x73	; 115
 88e:	71 f0       	breq	.+28     	; 0x8ac <vfprintf+0x12e>
 890:	83 35       	cpi	r24, 0x53	; 83
 892:	09 f0       	breq	.+2      	; 0x896 <vfprintf+0x118>
 894:	59 c0       	rjmp	.+178    	; 0x948 <vfprintf+0x1ca>
 896:	21 c0       	rjmp	.+66     	; 0x8da <vfprintf+0x15c>
 898:	f8 01       	movw	r30, r16
 89a:	80 81       	ld	r24, Z
 89c:	89 83       	std	Y+1, r24	; 0x01
 89e:	0e 5f       	subi	r16, 0xFE	; 254
 8a0:	1f 4f       	sbci	r17, 0xFF	; 255
 8a2:	88 24       	eor	r8, r8
 8a4:	83 94       	inc	r8
 8a6:	91 2c       	mov	r9, r1
 8a8:	53 01       	movw	r10, r6
 8aa:	13 c0       	rjmp	.+38     	; 0x8d2 <vfprintf+0x154>
 8ac:	28 01       	movw	r4, r16
 8ae:	f2 e0       	ldi	r31, 0x02	; 2
 8b0:	4f 0e       	add	r4, r31
 8b2:	51 1c       	adc	r5, r1
 8b4:	f8 01       	movw	r30, r16
 8b6:	a0 80       	ld	r10, Z
 8b8:	b1 80       	ldd	r11, Z+1	; 0x01
 8ba:	36 fe       	sbrs	r3, 6
 8bc:	03 c0       	rjmp	.+6      	; 0x8c4 <vfprintf+0x146>
 8be:	69 2d       	mov	r22, r9
 8c0:	70 e0       	ldi	r23, 0x00	; 0
 8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <vfprintf+0x14a>
 8c4:	6f ef       	ldi	r22, 0xFF	; 255
 8c6:	7f ef       	ldi	r23, 0xFF	; 255
 8c8:	c5 01       	movw	r24, r10
 8ca:	0e 94 ab 05 	call	0xb56	; 0xb56 <strnlen>
 8ce:	4c 01       	movw	r8, r24
 8d0:	82 01       	movw	r16, r4
 8d2:	f3 2d       	mov	r31, r3
 8d4:	ff 77       	andi	r31, 0x7F	; 127
 8d6:	3f 2e       	mov	r3, r31
 8d8:	16 c0       	rjmp	.+44     	; 0x906 <vfprintf+0x188>
 8da:	28 01       	movw	r4, r16
 8dc:	22 e0       	ldi	r18, 0x02	; 2
 8de:	42 0e       	add	r4, r18
 8e0:	51 1c       	adc	r5, r1
 8e2:	f8 01       	movw	r30, r16
 8e4:	a0 80       	ld	r10, Z
 8e6:	b1 80       	ldd	r11, Z+1	; 0x01
 8e8:	36 fe       	sbrs	r3, 6
 8ea:	03 c0       	rjmp	.+6      	; 0x8f2 <vfprintf+0x174>
 8ec:	69 2d       	mov	r22, r9
 8ee:	70 e0       	ldi	r23, 0x00	; 0
 8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <vfprintf+0x178>
 8f2:	6f ef       	ldi	r22, 0xFF	; 255
 8f4:	7f ef       	ldi	r23, 0xFF	; 255
 8f6:	c5 01       	movw	r24, r10
 8f8:	0e 94 a0 05 	call	0xb40	; 0xb40 <strnlen_P>
 8fc:	4c 01       	movw	r8, r24
 8fe:	f3 2d       	mov	r31, r3
 900:	f0 68       	ori	r31, 0x80	; 128
 902:	3f 2e       	mov	r3, r31
 904:	82 01       	movw	r16, r4
 906:	33 fc       	sbrc	r3, 3
 908:	1b c0       	rjmp	.+54     	; 0x940 <vfprintf+0x1c2>
 90a:	82 2d       	mov	r24, r2
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	88 16       	cp	r8, r24
 910:	99 06       	cpc	r9, r25
 912:	b0 f4       	brcc	.+44     	; 0x940 <vfprintf+0x1c2>
 914:	b6 01       	movw	r22, r12
 916:	80 e2       	ldi	r24, 0x20	; 32
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	0e 94 b6 05 	call	0xb6c	; 0xb6c <fputc>
 91e:	2a 94       	dec	r2
 920:	f4 cf       	rjmp	.-24     	; 0x90a <vfprintf+0x18c>
 922:	f5 01       	movw	r30, r10
 924:	37 fc       	sbrc	r3, 7
 926:	85 91       	lpm	r24, Z+
 928:	37 fe       	sbrs	r3, 7
 92a:	81 91       	ld	r24, Z+
 92c:	5f 01       	movw	r10, r30
 92e:	b6 01       	movw	r22, r12
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	0e 94 b6 05 	call	0xb6c	; 0xb6c <fputc>
 936:	21 10       	cpse	r2, r1
 938:	2a 94       	dec	r2
 93a:	21 e0       	ldi	r18, 0x01	; 1
 93c:	82 1a       	sub	r8, r18
 93e:	91 08       	sbc	r9, r1
 940:	81 14       	cp	r8, r1
 942:	91 04       	cpc	r9, r1
 944:	71 f7       	brne	.-36     	; 0x922 <vfprintf+0x1a4>
 946:	e8 c0       	rjmp	.+464    	; 0xb18 <vfprintf+0x39a>
 948:	84 36       	cpi	r24, 0x64	; 100
 94a:	11 f0       	breq	.+4      	; 0x950 <vfprintf+0x1d2>
 94c:	89 36       	cpi	r24, 0x69	; 105
 94e:	41 f5       	brne	.+80     	; 0x9a0 <vfprintf+0x222>
 950:	f8 01       	movw	r30, r16
 952:	37 fe       	sbrs	r3, 7
 954:	07 c0       	rjmp	.+14     	; 0x964 <vfprintf+0x1e6>
 956:	60 81       	ld	r22, Z
 958:	71 81       	ldd	r23, Z+1	; 0x01
 95a:	82 81       	ldd	r24, Z+2	; 0x02
 95c:	93 81       	ldd	r25, Z+3	; 0x03
 95e:	0c 5f       	subi	r16, 0xFC	; 252
 960:	1f 4f       	sbci	r17, 0xFF	; 255
 962:	08 c0       	rjmp	.+16     	; 0x974 <vfprintf+0x1f6>
 964:	60 81       	ld	r22, Z
 966:	71 81       	ldd	r23, Z+1	; 0x01
 968:	07 2e       	mov	r0, r23
 96a:	00 0c       	add	r0, r0
 96c:	88 0b       	sbc	r24, r24
 96e:	99 0b       	sbc	r25, r25
 970:	0e 5f       	subi	r16, 0xFE	; 254
 972:	1f 4f       	sbci	r17, 0xFF	; 255
 974:	f3 2d       	mov	r31, r3
 976:	ff 76       	andi	r31, 0x6F	; 111
 978:	3f 2e       	mov	r3, r31
 97a:	97 ff       	sbrs	r25, 7
 97c:	09 c0       	rjmp	.+18     	; 0x990 <vfprintf+0x212>
 97e:	90 95       	com	r25
 980:	80 95       	com	r24
 982:	70 95       	com	r23
 984:	61 95       	neg	r22
 986:	7f 4f       	sbci	r23, 0xFF	; 255
 988:	8f 4f       	sbci	r24, 0xFF	; 255
 98a:	9f 4f       	sbci	r25, 0xFF	; 255
 98c:	f0 68       	ori	r31, 0x80	; 128
 98e:	3f 2e       	mov	r3, r31
 990:	2a e0       	ldi	r18, 0x0A	; 10
 992:	30 e0       	ldi	r19, 0x00	; 0
 994:	a3 01       	movw	r20, r6
 996:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__ultoa_invert>
 99a:	88 2e       	mov	r8, r24
 99c:	86 18       	sub	r8, r6
 99e:	45 c0       	rjmp	.+138    	; 0xa2a <vfprintf+0x2ac>
 9a0:	85 37       	cpi	r24, 0x75	; 117
 9a2:	31 f4       	brne	.+12     	; 0x9b0 <vfprintf+0x232>
 9a4:	23 2d       	mov	r18, r3
 9a6:	2f 7e       	andi	r18, 0xEF	; 239
 9a8:	b2 2e       	mov	r11, r18
 9aa:	2a e0       	ldi	r18, 0x0A	; 10
 9ac:	30 e0       	ldi	r19, 0x00	; 0
 9ae:	25 c0       	rjmp	.+74     	; 0x9fa <vfprintf+0x27c>
 9b0:	93 2d       	mov	r25, r3
 9b2:	99 7f       	andi	r25, 0xF9	; 249
 9b4:	b9 2e       	mov	r11, r25
 9b6:	8f 36       	cpi	r24, 0x6F	; 111
 9b8:	c1 f0       	breq	.+48     	; 0x9ea <vfprintf+0x26c>
 9ba:	18 f4       	brcc	.+6      	; 0x9c2 <vfprintf+0x244>
 9bc:	88 35       	cpi	r24, 0x58	; 88
 9be:	79 f0       	breq	.+30     	; 0x9de <vfprintf+0x260>
 9c0:	b5 c0       	rjmp	.+362    	; 0xb2c <vfprintf+0x3ae>
 9c2:	80 37       	cpi	r24, 0x70	; 112
 9c4:	19 f0       	breq	.+6      	; 0x9cc <vfprintf+0x24e>
 9c6:	88 37       	cpi	r24, 0x78	; 120
 9c8:	21 f0       	breq	.+8      	; 0x9d2 <vfprintf+0x254>
 9ca:	b0 c0       	rjmp	.+352    	; 0xb2c <vfprintf+0x3ae>
 9cc:	e9 2f       	mov	r30, r25
 9ce:	e0 61       	ori	r30, 0x10	; 16
 9d0:	be 2e       	mov	r11, r30
 9d2:	b4 fe       	sbrs	r11, 4
 9d4:	0d c0       	rjmp	.+26     	; 0x9f0 <vfprintf+0x272>
 9d6:	fb 2d       	mov	r31, r11
 9d8:	f4 60       	ori	r31, 0x04	; 4
 9da:	bf 2e       	mov	r11, r31
 9dc:	09 c0       	rjmp	.+18     	; 0x9f0 <vfprintf+0x272>
 9de:	34 fe       	sbrs	r3, 4
 9e0:	0a c0       	rjmp	.+20     	; 0x9f6 <vfprintf+0x278>
 9e2:	29 2f       	mov	r18, r25
 9e4:	26 60       	ori	r18, 0x06	; 6
 9e6:	b2 2e       	mov	r11, r18
 9e8:	06 c0       	rjmp	.+12     	; 0x9f6 <vfprintf+0x278>
 9ea:	28 e0       	ldi	r18, 0x08	; 8
 9ec:	30 e0       	ldi	r19, 0x00	; 0
 9ee:	05 c0       	rjmp	.+10     	; 0x9fa <vfprintf+0x27c>
 9f0:	20 e1       	ldi	r18, 0x10	; 16
 9f2:	30 e0       	ldi	r19, 0x00	; 0
 9f4:	02 c0       	rjmp	.+4      	; 0x9fa <vfprintf+0x27c>
 9f6:	20 e1       	ldi	r18, 0x10	; 16
 9f8:	32 e0       	ldi	r19, 0x02	; 2
 9fa:	f8 01       	movw	r30, r16
 9fc:	b7 fe       	sbrs	r11, 7
 9fe:	07 c0       	rjmp	.+14     	; 0xa0e <vfprintf+0x290>
 a00:	60 81       	ld	r22, Z
 a02:	71 81       	ldd	r23, Z+1	; 0x01
 a04:	82 81       	ldd	r24, Z+2	; 0x02
 a06:	93 81       	ldd	r25, Z+3	; 0x03
 a08:	0c 5f       	subi	r16, 0xFC	; 252
 a0a:	1f 4f       	sbci	r17, 0xFF	; 255
 a0c:	06 c0       	rjmp	.+12     	; 0xa1a <vfprintf+0x29c>
 a0e:	60 81       	ld	r22, Z
 a10:	71 81       	ldd	r23, Z+1	; 0x01
 a12:	80 e0       	ldi	r24, 0x00	; 0
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	0e 5f       	subi	r16, 0xFE	; 254
 a18:	1f 4f       	sbci	r17, 0xFF	; 255
 a1a:	a3 01       	movw	r20, r6
 a1c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__ultoa_invert>
 a20:	88 2e       	mov	r8, r24
 a22:	86 18       	sub	r8, r6
 a24:	fb 2d       	mov	r31, r11
 a26:	ff 77       	andi	r31, 0x7F	; 127
 a28:	3f 2e       	mov	r3, r31
 a2a:	36 fe       	sbrs	r3, 6
 a2c:	0d c0       	rjmp	.+26     	; 0xa48 <vfprintf+0x2ca>
 a2e:	23 2d       	mov	r18, r3
 a30:	2e 7f       	andi	r18, 0xFE	; 254
 a32:	a2 2e       	mov	r10, r18
 a34:	89 14       	cp	r8, r9
 a36:	58 f4       	brcc	.+22     	; 0xa4e <vfprintf+0x2d0>
 a38:	34 fe       	sbrs	r3, 4
 a3a:	0b c0       	rjmp	.+22     	; 0xa52 <vfprintf+0x2d4>
 a3c:	32 fc       	sbrc	r3, 2
 a3e:	09 c0       	rjmp	.+18     	; 0xa52 <vfprintf+0x2d4>
 a40:	83 2d       	mov	r24, r3
 a42:	8e 7e       	andi	r24, 0xEE	; 238
 a44:	a8 2e       	mov	r10, r24
 a46:	05 c0       	rjmp	.+10     	; 0xa52 <vfprintf+0x2d4>
 a48:	b8 2c       	mov	r11, r8
 a4a:	a3 2c       	mov	r10, r3
 a4c:	03 c0       	rjmp	.+6      	; 0xa54 <vfprintf+0x2d6>
 a4e:	b8 2c       	mov	r11, r8
 a50:	01 c0       	rjmp	.+2      	; 0xa54 <vfprintf+0x2d6>
 a52:	b9 2c       	mov	r11, r9
 a54:	a4 fe       	sbrs	r10, 4
 a56:	0f c0       	rjmp	.+30     	; 0xa76 <vfprintf+0x2f8>
 a58:	fe 01       	movw	r30, r28
 a5a:	e8 0d       	add	r30, r8
 a5c:	f1 1d       	adc	r31, r1
 a5e:	80 81       	ld	r24, Z
 a60:	80 33       	cpi	r24, 0x30	; 48
 a62:	21 f4       	brne	.+8      	; 0xa6c <vfprintf+0x2ee>
 a64:	9a 2d       	mov	r25, r10
 a66:	99 7e       	andi	r25, 0xE9	; 233
 a68:	a9 2e       	mov	r10, r25
 a6a:	09 c0       	rjmp	.+18     	; 0xa7e <vfprintf+0x300>
 a6c:	a2 fe       	sbrs	r10, 2
 a6e:	06 c0       	rjmp	.+12     	; 0xa7c <vfprintf+0x2fe>
 a70:	b3 94       	inc	r11
 a72:	b3 94       	inc	r11
 a74:	04 c0       	rjmp	.+8      	; 0xa7e <vfprintf+0x300>
 a76:	8a 2d       	mov	r24, r10
 a78:	86 78       	andi	r24, 0x86	; 134
 a7a:	09 f0       	breq	.+2      	; 0xa7e <vfprintf+0x300>
 a7c:	b3 94       	inc	r11
 a7e:	a3 fc       	sbrc	r10, 3
 a80:	11 c0       	rjmp	.+34     	; 0xaa4 <vfprintf+0x326>
 a82:	a0 fe       	sbrs	r10, 0
 a84:	06 c0       	rjmp	.+12     	; 0xa92 <vfprintf+0x314>
 a86:	b2 14       	cp	r11, r2
 a88:	88 f4       	brcc	.+34     	; 0xaac <vfprintf+0x32e>
 a8a:	28 0c       	add	r2, r8
 a8c:	92 2c       	mov	r9, r2
 a8e:	9b 18       	sub	r9, r11
 a90:	0e c0       	rjmp	.+28     	; 0xaae <vfprintf+0x330>
 a92:	b2 14       	cp	r11, r2
 a94:	60 f4       	brcc	.+24     	; 0xaae <vfprintf+0x330>
 a96:	b6 01       	movw	r22, r12
 a98:	80 e2       	ldi	r24, 0x20	; 32
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	0e 94 b6 05 	call	0xb6c	; 0xb6c <fputc>
 aa0:	b3 94       	inc	r11
 aa2:	f7 cf       	rjmp	.-18     	; 0xa92 <vfprintf+0x314>
 aa4:	b2 14       	cp	r11, r2
 aa6:	18 f4       	brcc	.+6      	; 0xaae <vfprintf+0x330>
 aa8:	2b 18       	sub	r2, r11
 aaa:	02 c0       	rjmp	.+4      	; 0xab0 <vfprintf+0x332>
 aac:	98 2c       	mov	r9, r8
 aae:	21 2c       	mov	r2, r1
 ab0:	a4 fe       	sbrs	r10, 4
 ab2:	10 c0       	rjmp	.+32     	; 0xad4 <vfprintf+0x356>
 ab4:	b6 01       	movw	r22, r12
 ab6:	80 e3       	ldi	r24, 0x30	; 48
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	0e 94 b6 05 	call	0xb6c	; 0xb6c <fputc>
 abe:	a2 fe       	sbrs	r10, 2
 ac0:	17 c0       	rjmp	.+46     	; 0xaf0 <vfprintf+0x372>
 ac2:	a1 fc       	sbrc	r10, 1
 ac4:	03 c0       	rjmp	.+6      	; 0xacc <vfprintf+0x34e>
 ac6:	88 e7       	ldi	r24, 0x78	; 120
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	02 c0       	rjmp	.+4      	; 0xad0 <vfprintf+0x352>
 acc:	88 e5       	ldi	r24, 0x58	; 88
 ace:	90 e0       	ldi	r25, 0x00	; 0
 ad0:	b6 01       	movw	r22, r12
 ad2:	0c c0       	rjmp	.+24     	; 0xaec <vfprintf+0x36e>
 ad4:	8a 2d       	mov	r24, r10
 ad6:	86 78       	andi	r24, 0x86	; 134
 ad8:	59 f0       	breq	.+22     	; 0xaf0 <vfprintf+0x372>
 ada:	a1 fe       	sbrs	r10, 1
 adc:	02 c0       	rjmp	.+4      	; 0xae2 <vfprintf+0x364>
 ade:	8b e2       	ldi	r24, 0x2B	; 43
 ae0:	01 c0       	rjmp	.+2      	; 0xae4 <vfprintf+0x366>
 ae2:	80 e2       	ldi	r24, 0x20	; 32
 ae4:	a7 fc       	sbrc	r10, 7
 ae6:	8d e2       	ldi	r24, 0x2D	; 45
 ae8:	b6 01       	movw	r22, r12
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	0e 94 b6 05 	call	0xb6c	; 0xb6c <fputc>
 af0:	89 14       	cp	r8, r9
 af2:	38 f4       	brcc	.+14     	; 0xb02 <vfprintf+0x384>
 af4:	b6 01       	movw	r22, r12
 af6:	80 e3       	ldi	r24, 0x30	; 48
 af8:	90 e0       	ldi	r25, 0x00	; 0
 afa:	0e 94 b6 05 	call	0xb6c	; 0xb6c <fputc>
 afe:	9a 94       	dec	r9
 b00:	f7 cf       	rjmp	.-18     	; 0xaf0 <vfprintf+0x372>
 b02:	8a 94       	dec	r8
 b04:	f3 01       	movw	r30, r6
 b06:	e8 0d       	add	r30, r8
 b08:	f1 1d       	adc	r31, r1
 b0a:	80 81       	ld	r24, Z
 b0c:	b6 01       	movw	r22, r12
 b0e:	90 e0       	ldi	r25, 0x00	; 0
 b10:	0e 94 b6 05 	call	0xb6c	; 0xb6c <fputc>
 b14:	81 10       	cpse	r8, r1
 b16:	f5 cf       	rjmp	.-22     	; 0xb02 <vfprintf+0x384>
 b18:	22 20       	and	r2, r2
 b1a:	09 f4       	brne	.+2      	; 0xb1e <vfprintf+0x3a0>
 b1c:	42 ce       	rjmp	.-892    	; 0x7a2 <vfprintf+0x24>
 b1e:	b6 01       	movw	r22, r12
 b20:	80 e2       	ldi	r24, 0x20	; 32
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	0e 94 b6 05 	call	0xb6c	; 0xb6c <fputc>
 b28:	2a 94       	dec	r2
 b2a:	f6 cf       	rjmp	.-20     	; 0xb18 <vfprintf+0x39a>
 b2c:	f6 01       	movw	r30, r12
 b2e:	86 81       	ldd	r24, Z+6	; 0x06
 b30:	97 81       	ldd	r25, Z+7	; 0x07
 b32:	02 c0       	rjmp	.+4      	; 0xb38 <vfprintf+0x3ba>
 b34:	8f ef       	ldi	r24, 0xFF	; 255
 b36:	9f ef       	ldi	r25, 0xFF	; 255
 b38:	2b 96       	adiw	r28, 0x0b	; 11
 b3a:	e2 e1       	ldi	r30, 0x12	; 18
 b3c:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__epilogue_restores__>

00000b40 <strnlen_P>:
 b40:	fc 01       	movw	r30, r24
 b42:	05 90       	lpm	r0, Z+
 b44:	61 50       	subi	r22, 0x01	; 1
 b46:	70 40       	sbci	r23, 0x00	; 0
 b48:	01 10       	cpse	r0, r1
 b4a:	d8 f7       	brcc	.-10     	; 0xb42 <strnlen_P+0x2>
 b4c:	80 95       	com	r24
 b4e:	90 95       	com	r25
 b50:	8e 0f       	add	r24, r30
 b52:	9f 1f       	adc	r25, r31
 b54:	08 95       	ret

00000b56 <strnlen>:
 b56:	fc 01       	movw	r30, r24
 b58:	61 50       	subi	r22, 0x01	; 1
 b5a:	70 40       	sbci	r23, 0x00	; 0
 b5c:	01 90       	ld	r0, Z+
 b5e:	01 10       	cpse	r0, r1
 b60:	d8 f7       	brcc	.-10     	; 0xb58 <strnlen+0x2>
 b62:	80 95       	com	r24
 b64:	90 95       	com	r25
 b66:	8e 0f       	add	r24, r30
 b68:	9f 1f       	adc	r25, r31
 b6a:	08 95       	ret

00000b6c <fputc>:
 b6c:	0f 93       	push	r16
 b6e:	1f 93       	push	r17
 b70:	cf 93       	push	r28
 b72:	df 93       	push	r29
 b74:	fb 01       	movw	r30, r22
 b76:	23 81       	ldd	r18, Z+3	; 0x03
 b78:	21 fd       	sbrc	r18, 1
 b7a:	03 c0       	rjmp	.+6      	; 0xb82 <fputc+0x16>
 b7c:	8f ef       	ldi	r24, 0xFF	; 255
 b7e:	9f ef       	ldi	r25, 0xFF	; 255
 b80:	2c c0       	rjmp	.+88     	; 0xbda <fputc+0x6e>
 b82:	22 ff       	sbrs	r18, 2
 b84:	16 c0       	rjmp	.+44     	; 0xbb2 <fputc+0x46>
 b86:	46 81       	ldd	r20, Z+6	; 0x06
 b88:	57 81       	ldd	r21, Z+7	; 0x07
 b8a:	24 81       	ldd	r18, Z+4	; 0x04
 b8c:	35 81       	ldd	r19, Z+5	; 0x05
 b8e:	42 17       	cp	r20, r18
 b90:	53 07       	cpc	r21, r19
 b92:	44 f4       	brge	.+16     	; 0xba4 <fputc+0x38>
 b94:	a0 81       	ld	r26, Z
 b96:	b1 81       	ldd	r27, Z+1	; 0x01
 b98:	9d 01       	movw	r18, r26
 b9a:	2f 5f       	subi	r18, 0xFF	; 255
 b9c:	3f 4f       	sbci	r19, 0xFF	; 255
 b9e:	31 83       	std	Z+1, r19	; 0x01
 ba0:	20 83       	st	Z, r18
 ba2:	8c 93       	st	X, r24
 ba4:	26 81       	ldd	r18, Z+6	; 0x06
 ba6:	37 81       	ldd	r19, Z+7	; 0x07
 ba8:	2f 5f       	subi	r18, 0xFF	; 255
 baa:	3f 4f       	sbci	r19, 0xFF	; 255
 bac:	37 83       	std	Z+7, r19	; 0x07
 bae:	26 83       	std	Z+6, r18	; 0x06
 bb0:	14 c0       	rjmp	.+40     	; 0xbda <fputc+0x6e>
 bb2:	8b 01       	movw	r16, r22
 bb4:	ec 01       	movw	r28, r24
 bb6:	fb 01       	movw	r30, r22
 bb8:	00 84       	ldd	r0, Z+8	; 0x08
 bba:	f1 85       	ldd	r31, Z+9	; 0x09
 bbc:	e0 2d       	mov	r30, r0
 bbe:	09 95       	icall
 bc0:	89 2b       	or	r24, r25
 bc2:	e1 f6       	brne	.-72     	; 0xb7c <fputc+0x10>
 bc4:	d8 01       	movw	r26, r16
 bc6:	16 96       	adiw	r26, 0x06	; 6
 bc8:	8d 91       	ld	r24, X+
 bca:	9c 91       	ld	r25, X
 bcc:	17 97       	sbiw	r26, 0x07	; 7
 bce:	01 96       	adiw	r24, 0x01	; 1
 bd0:	17 96       	adiw	r26, 0x07	; 7
 bd2:	9c 93       	st	X, r25
 bd4:	8e 93       	st	-X, r24
 bd6:	16 97       	sbiw	r26, 0x06	; 6
 bd8:	ce 01       	movw	r24, r28
 bda:	df 91       	pop	r29
 bdc:	cf 91       	pop	r28
 bde:	1f 91       	pop	r17
 be0:	0f 91       	pop	r16
 be2:	08 95       	ret

00000be4 <__ultoa_invert>:
 be4:	fa 01       	movw	r30, r20
 be6:	aa 27       	eor	r26, r26
 be8:	28 30       	cpi	r18, 0x08	; 8
 bea:	51 f1       	breq	.+84     	; 0xc40 <__ultoa_invert+0x5c>
 bec:	20 31       	cpi	r18, 0x10	; 16
 bee:	81 f1       	breq	.+96     	; 0xc50 <__ultoa_invert+0x6c>
 bf0:	e8 94       	clt
 bf2:	6f 93       	push	r22
 bf4:	6e 7f       	andi	r22, 0xFE	; 254
 bf6:	6e 5f       	subi	r22, 0xFE	; 254
 bf8:	7f 4f       	sbci	r23, 0xFF	; 255
 bfa:	8f 4f       	sbci	r24, 0xFF	; 255
 bfc:	9f 4f       	sbci	r25, 0xFF	; 255
 bfe:	af 4f       	sbci	r26, 0xFF	; 255
 c00:	b1 e0       	ldi	r27, 0x01	; 1
 c02:	3e d0       	rcall	.+124    	; 0xc80 <__ultoa_invert+0x9c>
 c04:	b4 e0       	ldi	r27, 0x04	; 4
 c06:	3c d0       	rcall	.+120    	; 0xc80 <__ultoa_invert+0x9c>
 c08:	67 0f       	add	r22, r23
 c0a:	78 1f       	adc	r23, r24
 c0c:	89 1f       	adc	r24, r25
 c0e:	9a 1f       	adc	r25, r26
 c10:	a1 1d       	adc	r26, r1
 c12:	68 0f       	add	r22, r24
 c14:	79 1f       	adc	r23, r25
 c16:	8a 1f       	adc	r24, r26
 c18:	91 1d       	adc	r25, r1
 c1a:	a1 1d       	adc	r26, r1
 c1c:	6a 0f       	add	r22, r26
 c1e:	71 1d       	adc	r23, r1
 c20:	81 1d       	adc	r24, r1
 c22:	91 1d       	adc	r25, r1
 c24:	a1 1d       	adc	r26, r1
 c26:	20 d0       	rcall	.+64     	; 0xc68 <__ultoa_invert+0x84>
 c28:	09 f4       	brne	.+2      	; 0xc2c <__ultoa_invert+0x48>
 c2a:	68 94       	set
 c2c:	3f 91       	pop	r19
 c2e:	2a e0       	ldi	r18, 0x0A	; 10
 c30:	26 9f       	mul	r18, r22
 c32:	11 24       	eor	r1, r1
 c34:	30 19       	sub	r19, r0
 c36:	30 5d       	subi	r19, 0xD0	; 208
 c38:	31 93       	st	Z+, r19
 c3a:	de f6       	brtc	.-74     	; 0xbf2 <__ultoa_invert+0xe>
 c3c:	cf 01       	movw	r24, r30
 c3e:	08 95       	ret
 c40:	46 2f       	mov	r20, r22
 c42:	47 70       	andi	r20, 0x07	; 7
 c44:	40 5d       	subi	r20, 0xD0	; 208
 c46:	41 93       	st	Z+, r20
 c48:	b3 e0       	ldi	r27, 0x03	; 3
 c4a:	0f d0       	rcall	.+30     	; 0xc6a <__ultoa_invert+0x86>
 c4c:	c9 f7       	brne	.-14     	; 0xc40 <__ultoa_invert+0x5c>
 c4e:	f6 cf       	rjmp	.-20     	; 0xc3c <__ultoa_invert+0x58>
 c50:	46 2f       	mov	r20, r22
 c52:	4f 70       	andi	r20, 0x0F	; 15
 c54:	40 5d       	subi	r20, 0xD0	; 208
 c56:	4a 33       	cpi	r20, 0x3A	; 58
 c58:	18 f0       	brcs	.+6      	; 0xc60 <__ultoa_invert+0x7c>
 c5a:	49 5d       	subi	r20, 0xD9	; 217
 c5c:	31 fd       	sbrc	r19, 1
 c5e:	40 52       	subi	r20, 0x20	; 32
 c60:	41 93       	st	Z+, r20
 c62:	02 d0       	rcall	.+4      	; 0xc68 <__ultoa_invert+0x84>
 c64:	a9 f7       	brne	.-22     	; 0xc50 <__ultoa_invert+0x6c>
 c66:	ea cf       	rjmp	.-44     	; 0xc3c <__ultoa_invert+0x58>
 c68:	b4 e0       	ldi	r27, 0x04	; 4
 c6a:	a6 95       	lsr	r26
 c6c:	97 95       	ror	r25
 c6e:	87 95       	ror	r24
 c70:	77 95       	ror	r23
 c72:	67 95       	ror	r22
 c74:	ba 95       	dec	r27
 c76:	c9 f7       	brne	.-14     	; 0xc6a <__ultoa_invert+0x86>
 c78:	00 97       	sbiw	r24, 0x00	; 0
 c7a:	61 05       	cpc	r22, r1
 c7c:	71 05       	cpc	r23, r1
 c7e:	08 95       	ret
 c80:	9b 01       	movw	r18, r22
 c82:	ac 01       	movw	r20, r24
 c84:	0a 2e       	mov	r0, r26
 c86:	06 94       	lsr	r0
 c88:	57 95       	ror	r21
 c8a:	47 95       	ror	r20
 c8c:	37 95       	ror	r19
 c8e:	27 95       	ror	r18
 c90:	ba 95       	dec	r27
 c92:	c9 f7       	brne	.-14     	; 0xc86 <__ultoa_invert+0xa2>
 c94:	62 0f       	add	r22, r18
 c96:	73 1f       	adc	r23, r19
 c98:	84 1f       	adc	r24, r20
 c9a:	95 1f       	adc	r25, r21
 c9c:	a0 1d       	adc	r26, r0
 c9e:	08 95       	ret

00000ca0 <__prologue_saves__>:
 ca0:	2f 92       	push	r2
 ca2:	3f 92       	push	r3
 ca4:	4f 92       	push	r4
 ca6:	5f 92       	push	r5
 ca8:	6f 92       	push	r6
 caa:	7f 92       	push	r7
 cac:	8f 92       	push	r8
 cae:	9f 92       	push	r9
 cb0:	af 92       	push	r10
 cb2:	bf 92       	push	r11
 cb4:	cf 92       	push	r12
 cb6:	df 92       	push	r13
 cb8:	ef 92       	push	r14
 cba:	ff 92       	push	r15
 cbc:	0f 93       	push	r16
 cbe:	1f 93       	push	r17
 cc0:	cf 93       	push	r28
 cc2:	df 93       	push	r29
 cc4:	cd b7       	in	r28, 0x3d	; 61
 cc6:	de b7       	in	r29, 0x3e	; 62
 cc8:	ca 1b       	sub	r28, r26
 cca:	db 0b       	sbc	r29, r27
 ccc:	0f b6       	in	r0, 0x3f	; 63
 cce:	f8 94       	cli
 cd0:	de bf       	out	0x3e, r29	; 62
 cd2:	0f be       	out	0x3f, r0	; 63
 cd4:	cd bf       	out	0x3d, r28	; 61
 cd6:	09 94       	ijmp

00000cd8 <__epilogue_restores__>:
 cd8:	2a 88       	ldd	r2, Y+18	; 0x12
 cda:	39 88       	ldd	r3, Y+17	; 0x11
 cdc:	48 88       	ldd	r4, Y+16	; 0x10
 cde:	5f 84       	ldd	r5, Y+15	; 0x0f
 ce0:	6e 84       	ldd	r6, Y+14	; 0x0e
 ce2:	7d 84       	ldd	r7, Y+13	; 0x0d
 ce4:	8c 84       	ldd	r8, Y+12	; 0x0c
 ce6:	9b 84       	ldd	r9, Y+11	; 0x0b
 ce8:	aa 84       	ldd	r10, Y+10	; 0x0a
 cea:	b9 84       	ldd	r11, Y+9	; 0x09
 cec:	c8 84       	ldd	r12, Y+8	; 0x08
 cee:	df 80       	ldd	r13, Y+7	; 0x07
 cf0:	ee 80       	ldd	r14, Y+6	; 0x06
 cf2:	fd 80       	ldd	r15, Y+5	; 0x05
 cf4:	0c 81       	ldd	r16, Y+4	; 0x04
 cf6:	1b 81       	ldd	r17, Y+3	; 0x03
 cf8:	aa 81       	ldd	r26, Y+2	; 0x02
 cfa:	b9 81       	ldd	r27, Y+1	; 0x01
 cfc:	ce 0f       	add	r28, r30
 cfe:	d1 1d       	adc	r29, r1
 d00:	0f b6       	in	r0, 0x3f	; 63
 d02:	f8 94       	cli
 d04:	de bf       	out	0x3e, r29	; 62
 d06:	0f be       	out	0x3f, r0	; 63
 d08:	cd bf       	out	0x3d, r28	; 61
 d0a:	ed 01       	movw	r28, r26
 d0c:	08 95       	ret

00000d0e <_exit>:
 d0e:	f8 94       	cli

00000d10 <__stop_program>:
 d10:	ff cf       	rjmp	.-2      	; 0xd10 <__stop_program>
